//Darkness mode. codes from DarkDoomZ

//Courtesy FishyClockwork, with modifications by Caligari87
class PTDarkness_Handler : EventHandler {
	Array<int> BaseLightLevels;
	int Mode, Preset, PreGain, PostGain, FogDensity, MinLight;
	int OldMode, OldPreset, OldPreGain, OldPostGain, OldFogDensity, OldMinLight;
	double SkyMode, OldSkyMode;
	int BaseAdjustment, FinalAdjustment;
	bool IsSky;
	bool ddz_mode;

	override void WorldLoaded(WorldEvent e) {
		let ddz_lighting = Cvar.GetCvar("cl_darkness_mode", Players[consoleplayer]).GetBool();
		
		if(!ddz_lighting) {
			ThinkerIterator it = ThinkerIterator.Create ("Lighting");
			Lighting effect;
			while (effect = Lighting (it.Next ())) { effect.Destroy (); }
			ddz_mode = 0;
		}
		else
			ddz_mode = 1;

		BaseLightLevels.Clear();
		for(int i = 0; i < Level.Sectors.Size(); i++) {
			BaseLightlevels.Push(Level.Sectors[i].LightLevel);
		}

		ChangeLighting();
	}

	override void UiTick() {
		EventHandler.SendNetworkEvent("UpdateLights");
	}

	override void NetworkProcess(ConsoleEvent e) {
		if(e.Name == "UpdateLights")
		{
			let ddz_lighting = Cvar.GetCvar("cl_darkness_mode", Players[consoleplayer]).GetBool();
			if(ddz_lighting)
				ddz_mode = 1;
			else
				ddz_mode = 0;
			
			ChangeLighting();
		}
	}

	void ChangeLighting() {
		Mode = ddz_mode;
		Preset = 2;
		PreGain = 0;
		PostGain = 0;
		SkyMode = 1.0;
		FogDensity = 0;
		MinLight = 0;

		bool changed = (
			OldMode != Mode ||
			OldPreset != Preset ||
			OldPreGain != PreGain ||
			OldPostGain != PostGain ||
			OldSkyMode != Skymode ||
			OldFogDensity != FogDensity ||
			OldMinLight != MinLight);

		if (changed) {
			BaseAdjustment = 32 * Preset;
			for(int i = 0; i < BaseLightLevels.Size(); i++) {
				int BaseLightLevel = BaseLightLevels[i];
				BaseLightLevel += PreGain;

				IsSky = (level.Sectors[i].GetTexture(0) == skyflatnum ||
						 level.Sectors[i].GetTexture(1) == skyflatnum);

				FinalAdjustment = BaseAdjustment;
				if(IsSky) { FinalAdjustment = int(FinalAdjustment * SkyMode); }

				// Link to graphing calculator depiction of different modes
				// https://www.desmos.com/calculator/v1ni4wftcg
				switch(Mode) {
					case 1: //subtract raw light level (simple fade)
						Level.Sectors[i].Lightlevel = BaseLightLevel - FinalAdjustment;
						break;
					case 2: //linear compression
						Level.Sectors[i].Lightlevel = int(BaseLightLevel * (1.0 - FinalAdjustment / 256.0));
						break;
					case 3: //clamp max brightness level
						Level.Sectors[i].Lightlevel = clamp(BaseLightLevel, 0, 256 - FinalAdjustment);
						break;
					case 4: //apply exponential gamma curve
						Level.Sectors[i].Lightlevel = int((256 - (FinalAdjustment ** (FinalAdjustment / 256))) * (BaseLightLevel / 256.0) ** (1 + (FinalAdjustment / (33 - (FinalAdjustment / 8)))));
						break;
					case 10: //DarkDoom Lite (fixed subtract mode)
						Level.Sectors[i].Lightlevel = BaseLightLevel - 96;
						break;
					case 11: //DarkDoom Classic (fixed subtract mode)
						Level.Sectors[i].Lightlevel = BaseLightLevel - 128;
						break;
					case 12: //DarkDoom Black (fixed subtract mode)
						Level.Sectors[i].Lightlevel = BaseLightLevel - 256;
						break;
					default: //disable
						Level.Sectors[i].Lightlevel = BaseLightLevel; //reset lightlevels
						break;
				}

				Level.Sectors[i].Lightlevel = max(Level.Sectors[i].Lightlevel, MinLight);
				Level.Sectors[i].Lightlevel += PostGain;

				double FinalFogDensity = FogDensity;
				if(IsSky) { FinalFogDensity *= SkyMode; }
				level.Sectors[i].SetFogDensity(int(FinalFogDensity));
			}
		}
		OldMode = Mode;
		OldPreset = Preset;
		OldPreGain = PreGain;
		OldPostGain = PostGain;
		OldSkyMode = SkyMode;
		OldFogDensity = FogDensity;
		OldMinLight = MinLight;
	}
}